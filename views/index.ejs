<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Marcus' Giveaway Tool</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Marcus' Giveaway Tool</h1>
        <% if (transactionConfirmation) { %>
        <div id="walletInfo" class="mb-3">
            <button id="connectWallet" class="btn btn-primary">Connect Wallet</button>
            <p id="walletAddress" class="mt-2 d-none"></p>
        </div>
        <% } %>
        <form id="tokenForm">
            <div class="mb-3">
                <label for="mintAddress" class="form-label">Token Mint Address</label>
                <input type="text" class="form-control" id="mintAddress" required>
                <div id="addressError" class="form-text text-danger d-none">Invalid Solana address format</div>
            </div>
            <div class="mb-3">
                <label for="minTokens" class="form-label">Minimum Tokens</label>
                <input type="number" class="form-control" id="minTokens" value="<%= defaultMinBalance %>" required>
            </div>
            <button type="submit" class="btn btn-primary">Find Random Holder</button>
        </form>
        <div id="alertBox" class="alert alert-info mt-3 d-none" role="alert">
            Choosing a random holder...
        </div>
        <div id="resultBox" class="mt-3 d-none">
            <h3>Result:</h3>
            <p><strong>Token Name:</strong> <a id="tokenNameLink" href="#" target="_blank"><span id="tokenName"></span></a></p>
            <p><strong>Token Symbol:</strong> <a id="tokenSymbolLink" href="#" target="_blank"><span id="tokenSymbol"></span></a></p>
            <p><strong>Program Type:</strong> <span id="programType"></span></p>
            <p><strong>Eligible Holders:</strong> <span id="eligibleHolders"></span></p>
            <p><strong>Holder Address:</strong> <a id="holderAddressLink" href="#" target="_blank"><span id="holderAddress"></span></a></p>
            <p><strong>Holder's Token Balance:</strong> <span id="tokenBalance"></span></p>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/@solana/web3.js@latest/lib/index.iife.min.js"></script>
    <script>
        const transactionConfirmation = <%= transactionConfirmation %>;
        const transactionAmount = <%= transactionAmount %>;
        const transactionRecipient = '<%= transactionRecipient %>';
        let provider = null;
        let walletKey = null;

        function getProvider() {
            if ("solana" in window) {
                const provider = window.solana;
                if (provider.isPhantom) {
                    return provider;
                }
            }
            return null;
        }

        async function connectWallet() {
            provider = getProvider();
            if (provider) {
                try {
                    const response = await provider.connect();
                    walletKey = response.publicKey.toString();
                    document.getElementById('walletAddress').textContent = `Connected: ${walletKey}`;
                    document.getElementById('walletAddress').classList.remove('d-none');
                    document.getElementById('connectWallet').classList.add('d-none');
                } catch (err) {
                    console.error("Failed to connect wallet:", err);
                }
            } else {
                alert("No Phantom wallet found. Please install the Phantom browser extension.");
            }
        }

        if (transactionConfirmation) {
            document.getElementById('connectWallet').addEventListener('click', connectWallet);
        }

        function isValidSolanaAddress(address) {
            return /^[1-9A-HJ-NP-Za-km-z]{32,44}$/.test(address);
        }

        document.getElementById('tokenForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const mintAddress = document.getElementById('mintAddress').value;
            const minTokens = document.getElementById('minTokens').value;
            const alertBox = document.getElementById('alertBox');
            const resultBox = document.getElementById('resultBox');
            const addressError = document.getElementById('addressError');

            if (!isValidSolanaAddress(mintAddress)) {
                addressError.classList.remove('d-none');
                return;
            }
            addressError.classList.add('d-none');

            if (transactionConfirmation && !walletKey) {
                alert("Please connect your wallet first.");
                return;
            }

            alertBox.classList.remove('d-none');
            resultBox.classList.add('d-none');

            try {
                const response = await fetch('/getHolder', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        mintAddress,
                        minTokens,
                        walletKey
                    })
                });

                const data = await response.json();

                if (response.ok) {
                    if (data.transactionBase64) {
                        const transaction = solanaWeb3.Transaction.from(Buffer.from(data.transactionBase64, 'base64'));
                        const signedTransaction = await provider.signTransaction(transaction);
                        const signature = await solanaWeb3.sendAndConfirmRawTransaction(
                            new solanaWeb3.Connection(solanaWeb3.clusterApiUrl('mainnet-beta')),
                            signedTransaction.serialize()
                        );
                        alert(`Transaction sent. Signature: ${signature}`);
                    }
                    
                    const tokenNameElem = document.getElementById('tokenName');
                    const tokenSymbolElem = document.getElementById('tokenSymbol');
                    const tokenNameLink = document.getElementById('tokenNameLink');
                    const tokenSymbolLink = document.getElementById('tokenSymbolLink');
                    const holderAddressElem = document.getElementById('holderAddress');
                    const holderAddressLink = document.getElementById('holderAddressLink');
                    const eligibleHoldersElem = document.getElementById('eligibleHolders');

                    tokenNameElem.textContent = data.tokenName || 'N/A';
                    tokenSymbolElem.textContent = data.tokenSymbol || 'N/A';
                    document.getElementById('programType').textContent = data.programType;
                    holderAddressElem.textContent = data.ownerAddress;
                    eligibleHoldersElem.textContent = data.eligibleHolders;

                    const solscanTokenUrl = `https://solscan.io/token/${mintAddress}`;
                    tokenNameLink.href = solscanTokenUrl;
                    tokenSymbolLink.href = solscanTokenUrl;
                    holderAddressLink.href = `https://solscan.io/account/${data.ownerAddress}`;

                    const formattedBalance = new Intl.NumberFormat('en-US', {
                        minimumFractionDigits: 1,
                        maximumFractionDigits: 1
                    }).format(Math.round(data.adjustedBalance * 10) / 10);
                    
                    document.getElementById('tokenBalance').textContent = formattedBalance;
                    
                    resultBox.classList.remove('d-none');
                } else {
                    alert(`Error: ${data.error}`);
                }
            } catch (error) {
                alert(`An error occurred: ${error.message}`);
            } finally {
                alertBox.classList.add('d-none');
            }
        });
    </script>
</body>
</html>